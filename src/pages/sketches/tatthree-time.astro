---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import {
    createSVGOverlay,
    drawBorder,
    getDimensions,
    sketch,
  } from "@/utils/p5";
  import type { Draw, Setup, WindowResized } from "@/utils/p5";
  import type P5 from "p5";
  import dat from "dat.gui";

  const dimensions: number[] = getDimensions("A4");
  const padding: number[] = [16];
  const background = [255, 253, 252];
  const seed = 1;
  let margin: number;
  let gui: dat.GUI;

  const circle = (
    p5: P5,
    x: number,
    y: number,
    diameter: number,
    points: number,
  ) => {
    p5.beginShape();
    const angle = p5.TWO_PI / points;
    Array.from({ length: points }, (_, i) => {
      const modifier = p5.noise(x, i) * data.noiseStrength;
      const ax = x + p5.cos(angle * i) * (diameter + modifier);
      const ay = y + p5.sin(angle * i) * (diameter + modifier);
      data.smoothPoints ? p5.curveVertex(ax, ay) : p5.vertex(ax, ay);
    });
    p5.endShape("close");
  };

  const data = {
    layers: 10,
    circleColor: "#000000",
    spacing: 20,
    circleResolution: 80,
    noiseStrength: 0,
    smoothPoints: false,
    clipBorder: false,
  };

  const createGUI = (p5: P5) => {
    gui = new dat.GUI({ width: 400 });

    gui
      .add(data, "layers", 1, 200, 1)
      .name("Layers")
      .onChange(() => p5.redraw());
    gui
      .add(data, "spacing", 1, (p5.width - margin * 4) / (data.layers * 2), 1)
      .name("Spacing")
      .onChange(() => p5.redraw());
    gui
      .add(data, "circleResolution", 3, 360, 1)
      .name("Circle Resolution")
      .onChange(() => p5.redraw());
    gui
      .add(data, "noiseStrength", 0, 200, 1)
      .name("Noise Strength")
      .onChange(() => p5.redraw());
    gui
      .addColor(data, "circleColor")
      .name("Circle Color")
      .onChange(() => p5.redraw());
    gui
      .add(data, "smoothPoints")
      .name("Smooth Points")
      .onChange(() => p5.redraw());
    gui
      .add(data, "clipBorder")
      .name("Clip Border")
      .onChange(() => p5.redraw());
  };

  const handleRenders = (p5: P5) => {
    margin = p5.width * 0.075;
    gui && gui.destroy();
    createGUI(p5);
  };

  const setup: Setup = (p5) => {
    handleRenders(p5);
  };
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.noLoop();
    p5.clear(0, 0, 0, 0);
    p5.background(background);
    p5.noFill();

    p5.push();
    p5.stroke(data.circleColor);
    Array.from({ length: data.layers }, (_, i) => {
      circle(
        p5,
        p5.width * 0.5,
        p5.height * 0.5,
        data.spacing * (i + 1),
        data.circleResolution,
      );
    });
    p5.pop();

    data.clipBorder && createSVGOverlay(p5, margin, background);
    drawBorder(p5, margin);
  };

  sketch({
    seed,
    setup,
    windowResized,
    draw,
    dimensions,
    padding,
    saveAs: "svg",
    suffix: "tatthree-time",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
