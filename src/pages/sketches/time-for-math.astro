---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

export const prerender = true;

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import { getDimensions, sketch } from "@/utils/p5";
  import type { Draw, Setup, WindowResized } from "@/utils/p5";
  import { GUI } from "dat.gui";
  import type P5 from "p5";

  const padding: number[] = [40];
  const background = [55, 53, 52];
  const stroke = [255, 253, 252];
  let margin: number;
  let points: number[][];

  type Defaults = {
    dimensions: number[];
    amplitude: number;
    frequency: number;
    speed: number;
    length: number;
    saveGif?: () => void;
    filename: string;
    delay: number;
    circleSize: number;
    fill: boolean;
  };

  const defaults: Defaults = {
    dimensions: getDimensions("iPhoneProMax"),
    amplitude: 0,
    frequency: 8,
    speed: 0.01,
    length: 100,
    delay: 0,
    filename: "time-for-math",
    circleSize: 0,
    fill: true,
  };

  const dat = { ...defaults };

  const createGUI = (p5: P5) => {
    const gui = new GUI();
    const gf = gui.addFolder("gif");
    gui
      .add(dat, "amplitude", 0, p5.width * 0.5, 0.1)
      .onChange(() => p5.redraw());
    gui.add(dat, "frequency", 0, 1000, 0.1).onChange(() => p5.redraw());
    gui.add(dat, "speed", 0, 0.05, 0.001).onChange(() => p5.redraw());
    gui.add(dat, "length", 0, 1000).onChange(() => handleRenders(p5));
    gui
      .add(dat, "circleSize", 0, p5.width * 0.25, 0.01)
      .name("circle size")
      .onChange(() => handleRenders(p5));
    gui.add(dat, "fill").onChange(() => p5.redraw());
    gf.add(dat, "delay", 0, 128, 1).onChange(() => handleRenders(p5));
    gf.add(dat, "filename").onChange(() => handleRenders(p5));
    gf.add(dat, "saveGif").name("save gif");
  };

  const handleRenders = (p5: P5) => {
    if (dat.amplitude == defaults.amplitude) dat.amplitude = p5.width * 0.25;
    if (dat.circleSize == defaults.circleSize) dat.circleSize = p5.width * 0.02;
    dat.saveGif = () => {
      const frames = p5.TWO_PI / dat.speed;

      p5.saveGif(dat.filename, frames, {
        delay: dat.delay,
        units: "frames",
        silent: false,
      });
    };
    margin = p5.width * 0.075;
    points = Array.from({ length: dat.length }, (_, i) => {
      const x = p5.width * 0.5;
      const y = p5.lerp(margin, p5.height - margin, i / (dat.length - 1));

      return [x, y];
    });
  };

  const setup: Setup = (p5) => {
    handleRenders(p5);
    createGUI(p5);
  };
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.clear(0, 0, 0, 0);
    p5.background(background);

    if (dat.fill) {
      p5.fill(stroke);
    } else {
      p5.noFill();
    }
    p5.stroke(stroke);

    points.forEach(([x, y], i) => {
      const a = p5.map(i, 0, dat.length, 0, p5.TWO_PI * dat.frequency);
      const mx = p5.map(
        Math.cos(a + p5.frameCount * dat.speed),
        -1,
        1,
        x - dat.amplitude,
        x + dat.amplitude,
      );
      p5.circle(mx, y, dat.circleSize);
    });
  };

  sketch({
    setup,
    windowResized,
    draw,
    dimensions: dat.dimensions,
    padding,
    saveAs: "png",
    suffix: "time-for-math",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
