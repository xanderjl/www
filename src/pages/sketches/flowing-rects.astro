---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import {
    createGrid,
    createOverlay,
    drawBorder,
    getDimensions,
    sketch,
  } from "@/utils/p5";
  import type { Draw, KeyPressed, Setup, WindowResized } from "@/utils/p5";
  import type P5 from "p5";

  const dimensions: number[] = getDimensions("A4");
  const padding: number[] = [40];
  const background = [255, 253, 252];
  const rows = 20;
  const cols = 28;
  let seed = 1;
  let grid: number[][];
  let margin: number;
  let overlay: P5.Graphics;

  const walker = (
    p5: P5,
    x: number,
    y: number,
    a: number,
    length: number,
    amplitude: number,
    speed: number,
  ) => {
    Array.from({ length }, (_, i) => {
      const tx = x + i * speed;
      const ty =
        y + Math.sin(a + i * p5.map(p5.noise(i), 0, 1, 0, speed)) * amplitude;
      const w = p5.map(p5.noise(i, x), 0, 1, 0, p5.width * 0.075);
      const h = p5.map(p5.noise(i, y), 0, 1, 0, p5.width * 0.05);

      if (
        tx + w > p5.width - margin &&
        tx - w < margin &&
        ty + h > p5.height - margin &&
        ty - h < margin
      ) {
        return;
      }

      p5.push();
      p5.rotate(a);
      p5.translate(tx, ty);
      p5.rect(0, 0, w, h);
      p5.pop();
    });
  };

  const handleRenders = (p5: P5) => {
    p5.randomSeed(seed);
    p5.noiseSeed(seed);

    margin = p5.width * 0.075;
    grid = createGrid(rows, cols).map(([u, v]) => {
      const x = p5.lerp(margin, p5.width - margin, u);
      const y = p5.lerp(margin, p5.height - margin, v);
      const a = p5.map(p5.noise(u, v), 0, 1, 0, p5.TWO_PI);

      return [x, y, a];
    });
    overlay = createOverlay(p5, background, margin);
  };

  const setup: Setup = (p5) => handleRenders(p5);
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.clear(0, 0, 0, 0);
    p5.background(background);

    grid.forEach(([x, y, a]) => {
      p5.push();
      p5.translate(x, y);
      p5.rotate(a);
      walker(p5, 0, 0, a, 10, 10, 12);
      p5.pop();
    });

    p5.image(overlay, 0, 0);
    drawBorder(p5, margin);
  };

  const keyPressed: KeyPressed = (p5, e) => {
    if (e?.key === "ArrowLeft") {
      seed = seed - 1;
    } else if (e?.key === "ArrowRight") {
      seed = seed + 1;
    }

    handleRenders(p5);
  };

  sketch({
    setup,
    windowResized,
    draw,
    keyPressed,
    dimensions,
    padding,
    seed,
    saveAs: "svg",
    suffix: "flowing-rects",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
