---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import { createTiles, getDimensions, sketch } from "@/utils/p5";
  import type { Draw, Setup, WindowResized } from "@/utils/p5";
  import type P5 from "p5";

  const dimensions: number[] = getDimensions("square");
  const padding: number[] = [16];
  const background = [255, 253, 252];
  const rows = 8;
  let tiles: number[][];
  let margin: number;

  const handleRenders = (p5: P5) => {
    margin = (p5.width / rows) * 0.75;
    tiles = createTiles({
      rows,
      tileW: (p5.width - margin * 2) / rows,
      xStart: margin,
      yStart: margin,
    });

    p5.redraw();
  };

  const setup: Setup = (p5) => handleRenders(p5);
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.noLoop();
    p5.clear(0, 0, 0, 0);
    p5.background(background);
    p5.fill(0);
    tiles.forEach(([x, y, w], i) => {
      const diff = p5.map(i, 0, tiles.length, 0, w);
      p5.beginShape();
      p5.vertex(x + diff, y + w); // Bottom Left
      p5.vertex(x + w, y + w); // Bottom Right
      p5.vertex(x + w, y + diff); // Top Right
      i % (tiles.length / rows) && p5.vertex(x + w * 0.75, y + w * 0.75); // WILD CARD
      p5.endShape("close");
    });
  };

  sketch({
    setup,
    windowResized,
    draw,
    dimensions,
    padding,
    saveAs: "svg",
    suffix: "gridded-gradient",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
