---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import { createTiles, getDimensions, sketch } from "@/utils/p5";
  import type { Draw, Setup, WindowResized } from "@/utils/p5";
  import type P5 from "p5";

  const dimensions: number[] = getDimensions("A4");
  const padding: number[] = [16];
  const background = [255, 253, 252];
  const rows = 15;
  const cols = 10;
  let margin: number;
  let tiles: number[][];
  let tileW: number;
  let tileH: number;

  const lines = (
    p5: P5,
    x: number,
    y: number,
    w: number,
    h: number,
    numberOfLines: number,
    resolution = 10,
    vertical = true,
    padding = 0,
  ) => {
    if (vertical) {
      Array.from({ length: numberOfLines }, (_, i) => {
        const lx = p5.lerp(
          x + padding,
          x + (w - padding),
          i / (numberOfLines - 1),
        );
        const y1 = y + padding * 2;
        const y2 = y + (h - padding);
        p5.beginShape();
        Array.from({ length: resolution }, (_, j) => {
          const maxX = w * 0.025;
          const ly = p5.lerp(y1, y2, j / (resolution - 1));
          const noiseX = lx + p5.map(p5.noise(i, j), 0, 1, -maxX, maxX);
          p5.vertex(noiseX, ly);
        });
        p5.endShape();
      });

      return;
    }

    Array.from({ length: numberOfLines }, (_, i) => {
      const ly = p5.lerp(
        y + padding,
        y + (h - padding),
        i / (numberOfLines - 1),
      );
      const x1 = x + padding;
      const x2 = x + (w - padding * 4);
      p5.beginShape();
      Array.from({ length: resolution }, (_, j) => {
        const maxY = h * 0.025;
        const lx = p5.lerp(x1, x2, j / (resolution - 1));
        const noiseY = ly + p5.map(p5.noise(i, j), 0, 1, -maxY, maxY);
        p5.vertex(lx, noiseY);
      });
      p5.endShape();
    });
  };

  const handleRenders = (p5: P5) => {
    margin = p5.width * 0.125;
    tileW = (p5.width - margin * 2) / cols;
    tileH = (p5.height - margin * 2) / rows;
    tiles = createTiles({
      rows,
      cols,
      tileW,
      tileH,
      xStart: margin,
      yStart: margin,
    });
  };

  const setup: Setup = (p5) => handleRenders(p5);

  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.noLoop();
    p5.clear(0, 0, 0, 0);
    p5.background(background);
    p5.noFill();

    p5.push();
    tiles.forEach(([x, y, w, h], i) => {
      if (i % 2 === 0) {
        lines(p5, x, y, w, h, 10, 10, true, h * 0.025);
      }
    });
    p5.pop();

    p5.push();
    p5.strokeWeight(3);
    tiles.forEach(([x, y, w, h], i) => {
      if (i % 2 !== 0) {
        lines(p5, x, y, w, h, 8, 10, false);
      }
    });
    p5.pop();
  };

  sketch({
    setup,
    windowResized,
    draw,
    dimensions,
    padding,
    saveAs: "svg",
    suffix: "boxes",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
