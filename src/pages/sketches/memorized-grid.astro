---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

export const prerender = true;

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import { createGrid, getDimensions, sketch } from "@/utils/p5";
  import type { Draw, KeyPressed, Setup, WindowResized } from "@/utils/p5";
  import { hatchRect } from "@/utils/p5/shapes/hatchRect";
  import type P5 from "p5";

  const dimensions: number[] = getDimensions("A4");
  const padding: number[] = [40];
  const background = [255, 253, 252];
  const rows = 8;
  const cols = 12;
  let seed = 1;
  let margin: number;
  let dots: P5.Vector[];
  let grid: P5.Vector[];
  let rects: P5.Vector[];
  let lastVec: P5.Vector | undefined;

  const handleRenders = (p5: P5) => {
    p5.noiseSeed(seed);
    p5.randomSeed(seed);

    lastVec = undefined;
    margin = p5.width * 0.075;
    dots = createGrid(rows, cols).map(([u, v]) => {
      const x = p5.lerp(margin, p5.width - margin, u);
      const y = p5.lerp(margin, p5.height - margin, v);

      return p5.createVector(x, y);
    });
    grid = p5.shuffle(
      createGrid(rows, cols)
        .filter((_, i) => p5.noise(i) > 0.595)
        .map(([u, v]) => {
          const x = p5.lerp(margin, p5.width - margin, u);
          const y = p5.lerp(margin, p5.height - margin, v);

          return p5.createVector(x, y);
        }),
    );
    rects = grid.filter((_, i) => p5.noise(i) > 0.5);

    p5.redraw();
  };

  const setup: Setup = (p5) => handleRenders(p5);
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.noLoop();
    p5.clear(0, 0, 0, 0);
    p5.background(background);
    p5.rectMode("center");
    p5.ellipseMode("center");

    p5.push();
    p5.noFill();
    dots.forEach((vec) => {
      const { x, y } = vec;

      p5.circle(x, y, p5.width * 0.004);
    });
    p5.pop();

    p5.push();
    p5.stroke("red");
    rects.forEach((vec) => {
      const { x, y } = vec;
      const w = p5.random(p5.width * 0.5);
      const h = p5.random(p5.height * 0.33);
      const d = Math.floor(p5.random(w * 0.1, w * 0.12));

      hatchRect(p5, x, y, w, h, d, margin);
    });
    p5.pop();

    grid.forEach((vec) => {
      const { x, y } = vec;

      p5.rect(x, y, 10);

      if (typeof lastVec !== "undefined") {
        p5.line(x, y, lastVec.x, lastVec.y);
      }

      lastVec = vec;
    });
  };

  const keyPressed: KeyPressed = (p5, e) => {
    if (e?.key === "ArrowLeft") {
      seed--;
    } else if (e?.key === "ArrowRight") {
      seed++;
    }

    handleRenders(p5);
  };

  sketch({
    setup,
    windowResized,
    draw,
    dimensions,
    background,
    padding,
    keyPressed,
    seed,
    saveAs: "svg",
    suffix: "memorized-grid",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
