---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import { getDimensions, sketch } from "@/utils/p5";
  import type { Draw, Setup, WindowResized } from "@/utils/p5";
  import type P5 from "p5";
  import dat from "dat.gui";

  const dg = {
    resolution: 10,
    frequency: 100,
    amplitude: 100,
  };

  const createGUI = (p5: P5) => {
    const gui = new dat.GUI();
    gui
      .add(dg, "resolution", 1, 100, 1)
      .name("Resolution")
      .onChange(() => {
        p5.redraw();
      });
    gui
      .add(dg, "frequency", 1, 1000, 1)
      .name("Frequency")
      .onChange(() => {
        p5.redraw();
      });
    gui
      .add(dg, "amplitude", 1, 1000, 1)
      .name("Amplitude")
      .onChange(() => {
        p5.redraw();
      });
  };

  const dimensions: number[] = getDimensions("A4");
  const padding: number[] = [16];
  const background = [255, 253, 252];
  let margin: number;

  const handleRenders = (p5: P5) => {
    margin = p5.width * 0.075;
  };

  const setup: Setup = (p5) => {
    handleRenders(p5);
    createGUI(p5);
  };
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.noLoop();
    p5.clear(0, 0, 0, 0);
    p5.background(background);
    p5.noFill();

    p5.beginShape();
    Array.from({ length: dg.resolution }, (_, i) => {
      const x = p5.map(i, 0, dg.resolution, margin, p5.width - margin);
      const y = p5.height * 0.5 + p5.sin(p5.TWO_PI * i) * dg.amplitude;
      p5.vertex(x, y);
    });
    p5.endShape();
  };

  sketch({
    setup,
    windowResized,
    draw,
    dimensions,
    padding,
    saveAs: "svg",
    suffix: "freq-mod",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
