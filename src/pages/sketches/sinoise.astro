---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import { createGrid, getDimensions, sketch } from "@/utils/p5";
  import type { Draw, Setup, WindowResized } from "@/utils/p5";
  import type P5 from "p5";
  import dat from "dat.gui";

  const dimensions: number[] = getDimensions("A4");
  const padding: number[] = [16];
  const background = [255, 253, 252];
  const dg = {
    rows: 10,
    cols: 100,
    frequency: Math.PI * 1.25,
    phase: 0,
    amplitude: 0,
    fold: false,
    seed: 0,
    noise: 0,
    noiseAmplitude: 0,
  };
  let margin: number;
  let grid: number[][];

  const createGUI = (p5: P5) => {
    const gui = new dat.GUI();
    const dGrid = gui.addFolder("grid");
    const dOsc = gui.addFolder("oscillation");
    const dRand = gui.addFolder("randomness");
    dGrid
      .add(dg, "rows", 1, 200)
      .step(1)
      .onChange(() => handleRenders(p5));
    dGrid
      .add(dg, "cols", 1, 200)
      .step(1)
      .onChange(() => handleRenders(p5));
    dOsc
      .add(dg, "frequency", 0, Math.PI * 2)
      .step(0.01)
      .onChange(() => handleRenders(p5));
    dOsc
      .add(dg, "phase", 0, Math.PI * 2)
      .step(0.01)
      .onChange(() => handleRenders(p5));
    dOsc
      .add(dg, "amplitude", 0, (p5.height - margin * 2) / dg.rows)
      .step(1)
      .onChange(() => handleRenders(p5));
    dOsc.add(dg, "fold").onChange(() => {
      handleRenders(p5);
    });
    dRand
      .add(dg, "seed", 0, 1000)
      .step(1)
      .onChange(() => handleRenders(p5));
    dRand
      .add(dg, "noise", 0, 1)
      .step(0.001)
      .onChange(() => handleRenders(p5));
    dRand
      .add(dg, "noiseAmplitude", 0, p5.width * 0.25)
      .step(0.01)
      .onChange(() => handleRenders(p5));
  };

  const handleRenders = (p5: P5) => {
    p5.noiseSeed(dg.seed);
    p5.randomSeed(dg.seed);
    margin = p5.width * 0.125;
    grid = createGrid(dg.rows, dg.cols).map(([u, v], i) => {
      const rand = p5.random() > 0.5;
      const a1 = i / dg.cols;
      const a2 = a1 + p5.noise(u, v) * dg.noise * dg.noiseAmplitude;
      const a = a2 * dg.frequency + dg.phase;
      const xMod = p5.noise(u, v) * dg.noise * dg.noiseAmplitude;
      const x = p5.lerp(margin, p5.width - margin, u) + (rand ? xMod : -xMod);
      const y1 = p5.lerp(margin, p5.height - margin, v);
      const y2 =
        y1 +
        Math.cos(dg.fold ? Math.cos(a * dg.noiseAmplitude) : a) * dg.amplitude;

      return [x, y2];
    });

    p5.redraw();
  };

  const setup: Setup = (p5) => {
    dg.amplitude = p5.height * 0.04;
    handleRenders(p5);
    createGUI(p5);
  };
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.noLoop();
    p5.clear(0, 0, 0, 0);
    p5.background(background);
    p5.strokeWeight(2);

    grid.forEach(([x, y]) => {
      p5.point(x, y);
    });
  };

  sketch({
    setup,
    windowResized,
    draw,
    dimensions,
    padding,
    saveAs: "svg",
    suffix: "sinoise",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
