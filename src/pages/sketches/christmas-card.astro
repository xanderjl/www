---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

export const prerender = true;

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import { convertSeed, createTiles, getDimensions, sketch } from "@/utils/p5";
  import type { Draw, Setup, WindowResized } from "@/utils/p5";
  import type P5 from "p5";

  const dimensions: number[] = getDimensions("A4", { landscape: true });
  const padding: number[] = [16];
  const background = [255, 253, 252];
  // Define working area
  let x1: number;
  let y1: number;
  let x2: number;
  let y2: number;
  let bx1: number;
  let by1: number;
  let bx2: number;
  let by2: number;
  let tiles: number[][];
  let margin: number;
  let seed = convertSeed("The Lacailles");
  let rows = 15;
  let cols = 10;
  const length = 4;

  const tile1 = (p5: P5, x: number, y: number, w: number, h: number) => {
    const x1 = x + w;
    const y1 = y;

    Array.from({ length }).forEach((_, i) => {
      const p = i / 4 - 1;
      const aw = p5.map(p, 0, 1, 0, w * 2);
      const ah = p5.map(p, 0, 1, 0, h * 2);
      p5.arc(x1, y1, aw, ah, p5.HALF_PI, p5.PI);
    });
  };

  const tile2 = (p5: P5, x: number, y: number, w: number, h: number) => {
    const x1 = x;
    const y1 = y + h;

    Array.from({ length }).forEach((_, i) => {
      const p = i / 4 - 1;
      const aw = p5.map(p, 0, 1, 0, w * 2);
      const ah = p5.map(p, 0, 1, 0, h * 2);
      p5.arc(x1, y1, aw, ah, p5.HALF_PI + p5.PI, 0);
    });
  };

  const tile3 = (p5: P5, x: number, y: number, w: number, h: number) => {
    const x1 = x;
    const y1 = y;

    Array.from({ length }).forEach((_, i) => {
      const p = i / 4 - 1;
      const aw = p5.map(p, 0, 1, 0, w * 2);
      const ah = p5.map(p, 0, 1, 0, h * 2);
      p5.arc(x1, y1, aw, ah, 0, p5.HALF_PI);
    });
  };

  const tile4 = (p5: P5, x: number, y: number, w: number, h: number) => {
    const x1 = x + w;
    const y1 = y + h;

    Array.from({ length }).forEach((_, i) => {
      const p = i / 4 - 1;
      const aw = p5.map(p, 0, 1, 0, w * 2);
      const ah = p5.map(p, 0, 1, 0, h * 2);
      p5.arc(x1, y1, aw, ah, p5.PI, p5.HALF_PI + p5.PI);
    });
  };

  const handleRenders = (p5: P5) => {
    x1 = p5.width * 0.5;
    y1 = 0;
    x2 = p5.width;
    y2 = p5.height;

    margin = x1 * 0.075;

    bx1 = x1 + margin;
    by1 = y1 + margin;
    bx2 = x2 - margin;
    by2 = y2 - margin;
    tiles = createTiles({
      rows,
      cols,
      tileW: (bx2 - bx1) / cols,
      tileH: (by2 - by1) / rows,
      xStart: bx1,
      yStart: by1,
    });
  };

  const setup: Setup = (p5) => {
    p5.pixelDensity(1);
    handleRenders(p5);
  };
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.clear(0, 0, 0, 0);
    p5.background(background);
    p5.noFill();

    p5.push();
    p5.stroke("red");
    p5.strokeWeight(p5.width * 0.0025);
    p5.strokeCap("butt");
    p5.fill(background);

    // Tiles
    tiles.forEach(([x, y, w, h]) => {
      // randomly select a tile
      const tile = Math.floor(p5.random(1, 6));
      if (tile === 1) {
        tile1(p5, x, y, w, h);
        tile3(p5, x, y, w, h);
      }
      if (tile === 2) {
        tile2(p5, x, y, w, h);
        tile4(p5, x, y, w, h);
      }
      if (tile === 3) {
        tile1(p5, x, y, w, h);
        tile2(p5, x, y, w, h);
      }
      if (tile === 4) {
        tile3(p5, x, y, w, h);
        tile4(p5, x, y, w, h);
      }
      if (tile === 5) {
        tile1(p5, x, y, w, h);
        tile4(p5, x, y, w, h);
      }
      if (tile === 6) {
        tile2(p5, x, y, w, h);
        tile3(p5, x, y, w, h);
      }
    });
    p5.pop();

    // Overlay
    p5.push();
    p5.fill(background);
    p5.noStroke();
    p5.rect(0, y1, x1 + margin, y2);
    p5.rect(x1, y1, x2, margin);
    p5.rect(x1, y2 - margin, x2, margin);
    p5.rect(x2 - margin, y1, margin, y2);
    p5.pop();

    // Border
    p5.rect(bx1, by1, bx2 - bx1, by2 - by1);

    // Mark fold
    p5.push();
    p5.stroke("blue");
    p5.line(x1, y1, x1, y1 + p5.height * 0.005);
    p5.line(x1, y2, x1, y2 - p5.height * 0.005);
    p5.pop();
  };

  sketch({
    setup,
    windowResized,
    draw,
    dimensions,
    padding,
    seed,
    saveAs: "svg",
    suffix: "christmas-card",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
