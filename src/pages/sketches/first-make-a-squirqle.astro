---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import { getDimensions, sketch, createSVGOverlay } from "@/utils/p5";
  import type { Draw, Setup, WindowResized } from "@/utils/p5";
  import type P5 from "p5";

  const dimensions: number[] = getDimensions("A4");
  const padding: number[] = [16];
  const background = [255, 253, 252];
  let margin: number;

  const handleRenders = (p5: P5) => {
    margin = p5.width * 0.075;
  };

  const setup: Setup = (p5) => handleRenders(p5);
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.clear(0, 0, 0, 0);
    p5.background(background);

    p5.push();
    p5.fill(255, 0, 0);
    p5.stroke(255, 0, 0);
    p5.rect(margin, margin, p5.width - margin * 2, p5.height - margin * 2);
    p5.pop();

    p5.push();
    p5.fill(background);
    p5.stroke(background);
    p5.circle(p5.width * 0.5, p5.height * 0.5, p5.width - margin * 6);
    p5.pop();

    p5.push();
    p5.fill(0);
    p5.stroke(0);
    const length = 200;
    const buffer = p5.height * 0.025;
    Array.from({ length }, (_, i) => {
      const x1 = p5.width * 0.5;
      const x2 = p5.width - margin - buffer;
      const y = p5.map(i, 0, length - 1, margin + buffer, p5.height * 0.5);
      p5.line(x1, y, x2, y);
    });

    p5.circle(p5.width * 0.25, p5.height * 0.75, p5.width * 0.4);
    p5.pop();

    createSVGOverlay(p5, margin, background);
  };

  sketch({
    setup,
    windowResized,
    draw,
    dimensions,
    padding,
    saveAs: "svg",
    suffix: "first-make-a-squirqle",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
