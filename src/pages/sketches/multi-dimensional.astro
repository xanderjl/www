---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import { drawBorder, getDimensions, sketch } from "@/utils/p5";
  import type { Draw, Setup, WindowResized } from "@/utils/p5";
  import type P5 from "p5";

  const dimensions: number[] = getDimensions("A4");
  const padding: number[] = [40];
  const background = [255, 253, 252];
  let td: P5.Graphics;
  let margin: number;

  const handleRenders = (p5: P5) => {
    margin = p5.width * 0.075;
    td = p5.createGraphics(p5.width, p5.height, "webgl");

    td.push();
    td.rotateX(td.radians(45));
    td.rotateZ(td.radians(45));
    td.box(td.width * 0.2);
    td.pop();
  };

  const setup: Setup = (p5) => handleRenders(p5);
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.clear(0, 0, 0, 0);
    p5.background(background);

    p5.push();
    p5.stroke("red");
    p5.noFill();
    p5.strokeWeight(p5.width * 0.0075);

    const d = (p5.width - margin * 2) * 0.5;
    const cx = p5.width * 0.5;
    const cy = p5.height * 0.5;
    const offset = p5.width * 0.00175;

    Array.from({ length: 30 }, (_, i) => {
      const x = p5.map(p5.noise(i), 0, 1, cx - offset, cx + offset);
      const y = p5.map(p5.noise(i), 0, 1, cy - offset, cy + offset);

      p5.circle(x, y, d * i * 0.04 + 1);
    });
    p5.pop();

    p5.image(td, 0, 0);

    drawBorder(p5, margin);
  };

  sketch({
    setup,
    windowResized,
    draw,
    dimensions,
    padding,
    saveAs: "svg",
    suffix: "multi-dimensional",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
