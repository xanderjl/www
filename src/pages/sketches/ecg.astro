---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

export const prerender = true;

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import { getDimensions, sketch } from "@/utils/p5";
  import type { Draw, Setup, WindowResized } from "@/utils/p5";
  import type P5 from "p5";
  import data from "@/assets/data/ecg_2021-08-24.json";

  const dimensions: number[] = getDimensions("A4");
  const padding: number[] = [40];
  const background = [255, 253, 252];
  let table: number[][] = [];
  let margin: number;

  const shape = (p5: P5, val: number, cx: number, cy: number, w: number) => {
    p5.push();
    p5.rectMode("center");
    for (let i = 0; i < 9; i++) {
      const x = cx + i * w;
      const y = cy + Math.floor(i / 3 - 1) * w;

      p5.fill(i % 2 === 1 ? 0 : 255);
      p5.rect(x, y, w / 9, w / 9);
    }
    p5.pop();
  };

  const chunk = <T,>(arr: T[], n: number): T[][] => {
    const size = Math.ceil(arr.length / n);

    return Array.from({ length: n }, (_, i) =>
      arr.slice(i * size, i * size + size),
    );
  };

  const handleRenders = (p5: P5) => {
    margin = p5.width * 0.05;
    table = chunk(data, 5);
  };

  const setup: Setup = (p5) => handleRenders(p5);
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.clear(0, 0, 0, 0);
    p5.background(background);

    shape(p5, 20, p5.width / 2, p5.height / 2, p5.width * 0.2);
  };

  sketch({
    setup,
    draw,
    windowResized,
    dimensions,
    padding,
    saveAs: "png",
    suffix: "ecg",
    seed: 1,
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
