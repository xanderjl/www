---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

export const prerender = true;

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import type P5 from "p5";
  import type {
    Draw,
    KeyPressed,
    Preload,
    Setup,
    WindowResized,
  } from "@/utils/p5";
  import { getDimensions, sketch } from "@/utils/p5";
  import { flyer } from "@/utils/p5/shapes/flyer";

  const dimensions: number[] = getDimensions("A4");
  const padding: number[] = [40];
  const background = [255, 253, 252];
  let table: number[][] = [];
  let groups: [number, number, number[]][] = [];
  let margin: number;
  let data: number[];
  let seed: number = 1;

  const chunk = <T,>(arr: T[], n: number): T[][] => {
    const size = Math.ceil(arr.length / n);

    return Array.from({ length: n }, (_, i) =>
      arr.slice(i * size, i * size + size),
    );
  };

  const handleRenders = (p5: P5) => {
    const sliceAmt = Math.floor(Math.floor(p5.random(data.length)) * 0.05);
    margin = p5.width * 0.05;
    table = chunk(data, sliceAmt);
    groups = table.map((data) => {
      const x = p5.random(margin, p5.width - margin);
      const y = p5.random(margin, p5.height - margin);

      return [x, y, data];
    });

    p5.noiseSeed(seed);
    p5.randomSeed(seed);
    p5.redraw();
  };

  const preload: Preload = (p5) => {
    // @ts-ignore
    data = p5.loadJSON(`/data/ecg_2021-08-24.json`);
  };

  const setup: Setup = (p5) => {
    data = Object.values(data);
    handleRenders(p5);
  };
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.noLoop();
    p5.noiseSeed(seed);
    p5.randomSeed(seed);
    p5.clear(0, 0, 0, 0);
    p5.background(background);

    const d = (p5.width - margin * 2) * 0.5;
    const r = d * 0.5;
    const cx = p5.width * 0.5;
    const cy = p5.height * 0.5;

    groups.slice(0, Math.floor(groups.length * 0.5)).forEach(([x, y, arr]) => {
      arr.slice(0, Math.floor(arr.length * 0.9)).forEach((val, i) => {
        const a = p5.width * 0.1;
        const b = p5.width * 0.3;
        const rand = p5.random(1);
        const sin = Math.sin(Math.PI * p5.noise(a, i)) * b;
        const cos = Math.cos(Math.PI * p5.noise(a, i)) * b;
        const arrCx = rand > 0.5 ? x + sin : x - sin;
        const arrCy = rand > 0.5 ? y + cos : y - cos;
        const bx =
          arrCx > p5.width - margin
            ? p5.width - margin
            : arrCx < margin
            ? margin
            : arrCx;
        const by =
          arrCy > p5.height - margin
            ? p5.height - margin
            : arrCy < margin
            ? margin
            : arrCy;
        const size = p5.width * p5.noise(b, i) * 0.006;

        flyer(p5, val, bx, by, size);
      });
    });

    p5.push();
    p5.stroke("red");
    p5.noFill();

    p5.circle(cx, cy, d);

    Array.from({ length: 80 }, (_, i) => {
      const offset = Math.PI / i;
      const startX = cx + Math.sin(Math.PI * 0.5 - offset) * r;
      const startY = cy + Math.cos(Math.PI * 0.5 - offset) * r;
      const endX = cx - Math.sin(Math.PI * 0.5 + offset) * r;
      const endY = cy - Math.cos(Math.PI * 0.5 + offset) * r;

      p5.beginShape();
      Array.from({ length: 20 }, (_, j) => {
        const percent = j / 20;
        const x = p5.lerp(startX, endX, percent);
        const y = startY + Math.sin(j) * p5.width * 0.05;
        p5.curveVertex(x, y);
      });
      p5.endShape();
    });
    p5.pop();
  };

  const keyPressed: KeyPressed = (p5, e) => {
    if (e?.key === "ArrowRight") {
      seed++;
    } else if (e?.key === "ArrowLeft") {
      seed--;
    }
    p5.redraw();
  };

  sketch({
    preload,
    setup,
    draw,
    windowResized,
    keyPressed,
    padding,
    saveAs: "svg",
    dimensions,
    seed,
    suffix: "ecg",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
