---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

export const prerender = true;

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");

Astro.request.headers.set("Cache-Control", "no-cache");
---

<script>
  import type P5 from "p5";
  import type { Draw, Preload, Setup, WindowResized } from "@/utils/p5";
  import { createGrid, getDimensions, sketch } from "@/utils/p5";

  const dimensions: number[] = getDimensions("A4");
  const padding: number[] = [40];
  const background = [255, 253, 252];
  let table: number[][] = [];
  let groups: [number, number, number[]][] = [];
  let margin: number;
  let data: number[];
  let seed: number = 1;

  const shape = (p5: P5, val: number, cx: number, cy: number, w: number) => {
    let fillCount = 0;
    const grid = createGrid(3);

    p5.push();
    p5.noStroke();
    p5.rectMode("center");
    grid.forEach(([u, v]) => {
      const x = p5.lerp(cx - w, cx + w, u);
      const y = p5.lerp(cy - w, cy + w, v);
      const flipped = p5.random(val) > 0.99;
      const threshold = p5.random(1) > 0.75 ? 3 : p5.random(1) < 0.25 ? 4 : 5;

      if (flipped && fillCount < threshold) {
        p5.fill(0);
        p5.rect(x, y, w);
        fillCount++;
      } else {
        p5.noFill();
      }
    });
    p5.pop();
  };

  const chunk = <T,>(arr: T[], n: number): T[][] => {
    const size = Math.ceil(arr.length / n);

    return Array.from({ length: n }, (_, i) =>
      arr.slice(i * size, i * size + size),
    );
  };

  const handleRenders = (p5: P5, arr: number[]) => {
    margin = p5.width * 0.05;
    table = chunk(arr, 30);
    groups = table.map((arr) => {
      const x = p5.random(margin, p5.width - margin);
      const y = p5.random(margin, p5.height - margin);

      return [x, y, arr];
    });
  };

  const preload: Preload = (p5) => {
    // @ts-ignore
    data = p5.loadJSON(`/data/ecg_2021-08-24.json`);
  };

  const setup: Setup = (p5) => {
    data = Object.values(data);
    handleRenders(p5, data);
  };
  const windowResized: WindowResized = (p5) => handleRenders(p5, data);

  const draw: Draw = (p5) => {
    p5.clear(0, 0, 0, 0);
    p5.background(background);

    groups.forEach(([x, y, arr]) => {
      arr.forEach((val) => {
        const a = 0;
        const cx = x + Math.sin(Math.PI * a);
        const cy = y + Math.cos(Math.PI * a);
        const r = p5.width * 0.0025;
        shape(p5, val, cx, cy, r);
      });
    });
  };

  sketch({
    preload,
    setup,
    draw,
    windowResized,
    padding,
    saveAs: "png",
    dimensions,
    seed,
    suffix: "ecg",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
