---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import type { LineString } from "geojson";
  import type P5 from "p5";

  import { chunk } from "@/utils/chunk";
  import type {
    Draw,
    GeoJSON,
    Preload,
    Setup,
    WindowResized,
  } from "@/utils/p5";
  import {
    createGrain,
    createOverlay,
    createTiles,
    drawBorder,
    getDimensions,
    getGeoData,
    sketch,
  } from "@/utils/p5";

  const dimensions: number[] = getDimensions("A4", { scale: 2 });
  const padding: number[] = [40];
  const background = [255, 253, 252];
  let data: GeoJSON;
  let coordChunks: LineString["coordinates"][];
  let minXCoord: number;
  let maxXCoord: number;
  let minYCoord: number;
  let maxYCoord: number;
  let minZCoord: number;
  let maxZCoord: number;
  let margin: number;
  let maxW: number;
  let maxH: number;
  let overlay: P5.Graphics;
  let grain: P5.Graphics;
  let seed = 1;
  let quadrants: number[][];

  const preload: Preload = (p5) => {
    data = p5.loadJSON("/data/geo/route_2019-10-05_7.38am.geojson") as GeoJSON;
  };

  const handleRenders = (p5: P5) => {
    margin = p5.width * 0.075;
    maxW = p5.width - margin * 2;
    maxH = p5.height - margin * 2;
    overlay = createOverlay(p5, background, margin);
    grain = createGrain(p5);
    quadrants = createTiles({
      rows: 2,
      tileH: maxH * 0.5,
      tileW: maxW * 0.5,
    });
  };

  const setup: Setup = (p5) => {
    handleRenders(p5);
    const { coordinates, minX, maxX, minY, maxY, minZ, maxZ } =
      getGeoData(data);
    coordChunks = chunk(coordinates, 4);
    minXCoord = minX;
    maxXCoord = maxX;
    minYCoord = minY;
    maxYCoord = maxY;
    minZCoord = minZ;
    maxZCoord = maxZ;
  };
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.clear(0, 0, 0, 0);
    p5.background(background);
    p5.stroke(p5.width * 0.01);

    p5.push();
    p5.noFill();
    coordChunks.forEach((coords, i) => {
      // Define bounds
      const quad = quadrants[i];
      const x1 = margin + quad[0];
      const y1 = margin + quad[1];
      const x2 = x1 + maxW * 0.5;
      const y2 = y1 + maxH * 0.5;
      const w = x2 - x1;
      const h = y2 - y1;

      // Draw Coords
      coords
        .filter((_, i) => i % 2 == 0)
        .forEach((coord, i) => {
          const f = i / coords.filter((_, i) => i % 2 == 0).length;
          const [x, y, z] = coord;
          const rx = p5.lerp(x1, x2, f);
          const ry = p5.lerp(y1, y2, f);
          const rw = p5.map(f, 0, 1, w * f, x1);
          const rh = p5.map(f, 0, 1, h * f, y1);
          const dash = p5.map(
            z,
            minZCoord,
            maxZCoord,
            p5.width * 0.001,
            p5.width * 0.075,
          );

          p5.drawingContext.setLineDash([
            Math.floor(
              p5.map(p5.noise(dash), 0, 1, p5.width * 0.001, p5.width * 0.01),
            ),
            Math.floor(p5.random(dash)),
          ]);

          p5.rect(rx, ry, rw, rh);
        });
    });
    p5.pop();

    drawBorder(p5, margin);
    p5.image(overlay, 0, 0);
    p5.image(grain, 0, 0);
  };

  sketch({
    dimensions,
    draw,
    padding,
    preload,
    saveAs: "png",
    seed,
    setup,
    suffix: "geo-two",
    windowResized,
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
