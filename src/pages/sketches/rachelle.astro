---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

export const prerender = true;

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import type P5 from "p5";

  import { getDimensions } from "@/utils/getDimensions";
  import type { Draw, Setup, WindowResized, Preload } from "@/utils/p5";
  import { convertSeed, createGrid, sketch } from "@/utils/p5";

  const poem: string[] = [
    "We went to the coffee shop, where",
    "I walked up and introduced myself, I was afraid that he might run away",
    "It made me weirdly sad to imagine",
    "like-minded oddballs and",
    "capacities for empathy and warmth",
    "pinpoints in a greater darkness,",
    "tells this metaphysical love story",
    "desired by a ghost, who inhabits",
    "a house in rural upstate New York, with a",
    "human skeleton on a shelf in the basement.",
    "took a break to watch a movie together.",
    "Time moves whether we want it to or not.",
    "The moon lit up the mountains as I drove to the valley below.",
    "Big Husband.",
    "\"He's sleepy",
    "But I want to see him.",
    '"I hope that I was able to help you',
  ];

  const dimensions: number[] = getDimensions("A4");
  const padding: number[] = [40];
  const poemString = poem.join();
  const seed = convertSeed(poemString);
  const poemArr = Array.from(poemString).filter(
    (char) => char !== " " && char !== "," && char !== ".",
  );

  let margin: number;
  let res: number = 40;
  let letterIndex: number;
  let letter: string;
  let grid: [number, number, boolean][] = [];
  let points: number[][] = [];
  let mono: P5.Font;

  const handleRenders = (p5: P5) => {
    margin = p5.width * 0.075;
    letterIndex = Math.ceil(p5.random(poemString.length));
    letter = poemString[letterIndex];
    letter = "r";

    grid = createGrid(res).map(([u, v]) => {
      const x = p5.lerp(margin, p5.width - margin, u);
      const y = p5.lerp(margin, p5.height - margin, v);
      const randomChar = poemString[Math.ceil(p5.random(poemString.length))];
      const s = Boolean(randomChar === letter);

      if (randomChar === letter) {
        points.push([x, y]);
      }

      return [x, y, s];
    });

    p5.textFont(mono);
  };

  const preload: Preload = (p5) => {
    mono = p5.loadFont("../assets/fonts/DMMono-Regular.ttf");
  };
  const setup: Setup = (p5) => handleRenders(p5);
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.clear(0, 0, 0, 0);
    p5.frameRate(1);
    p5.rectMode("center");
    const w = p5.width * 0.0075;

    grid.forEach(([x, y, s], i) => {
      if (s) {
        p5.push();
        p5.fill("red");
        p5.stroke("red");
        p5.circle(x, y, w * 0.75);
        p5.pop();
      } else {
        const char = poemArr[Math.floor(p5.random(poemArr.length))];
        const size = p5.map(
          p5.noise(x, y, i),
          0,
          1,
          margin * 0.05,
          margin * 0.35,
        );
        p5.textSize(p5.random(size));
        p5.textAlign("center", "center");
        p5.text(char, x, y);
      }
    });

    p5.push();
    p5.stroke("red");
    p5.noFill();
    points.forEach(([x, y]) => {
      const rdm = p5.random(1);
      const start =
        rdm > 0.75
          ? 0
          : rdm < 0.25
          ? p5.PI
          : rdm < 0.75 && rdm > 0.5
          ? p5.HALF_PI + p5.PI
          : p5.HALF_PI;
      const end = start + p5.PI;
      const d = w * 3;
      rdm > 0.5 && p5.arc(x, y, d, d, start, end);
    });
    p5.pop();
  };

  sketch({
    preload,
    setup,
    draw,
    windowResized,
    dimensions,
    padding,
    renderer: "svg",
    suffix: "rachelle",
    seed,
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
