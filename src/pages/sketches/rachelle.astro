---
import { capitalCase } from 'change-case'

import Sketch from '@/components/Sketch.astro'
import SketchLayout from '@/layouts/SketchLayout.astro'

export const prerender = true

const { pathname } = Astro.url
const title = capitalCase(pathname.split('/').pop() ?? '')
---

<script>
  import type P5 from 'p5'

  import { getDimensions } from '@/utils/getDimensions'
  import type { Draw } from '@/utils/p5'
  import { sketch } from '@/utils/p5'

  const poem: string[] = [
    'We went to the coffee shop, where',
    'I walked up and introduced myself, I was afraid that he might run away',
    'It made me weirdly sad to imagine',
    'like-minded oddballs and',
    'capacities for empathy and warmth',
    'pinpoints in a greater darkness,',
    'tells this metaphysical love story',
    'desired by a ghost, who inhabits',
    'a house in rural upstate New York, with a',
    'human skeleton on a shelf in the basement.',
    'took a break to watch a movie together.',
    'Time moves whether we want it to or not.',
    'The moon lit up the mountains as I drove to the valley below.',
    'Big Husband.',
    '"He\'s sleepy',
    'But I want to see him.',
    '"I hope that I was able to help you'
  ]

  const noiseMap = (
    p5: P5,
    noiseValues: [number, number?, number?],
    minMax: [number, number]
  ) => p5.map(p5.noise(...noiseValues), 0, 1, minMax[0], minMax[1])

  const dimensions: number[] = getDimensions('A4')
  const padding: number[] = [40]
  const background = [255, 253, 252]
  const marginRatio = 0.0005
  const seed = 123
  const poemString = poem.join()
  const poemArr = Array.from(poemString).filter(
    char => char !== ' ' && char !== ',' && char !== '.'
  )
  let margin = 0

  const draw: Draw = p5 => {
    p5.clear(0, 0, 0, 0)
    margin = p5.width * marginRatio

    poemArr.map((char, i) => {
      const x = noiseMap(p5, [i, p5.width], [margin, p5.width - margin])
      const y = noiseMap(p5, [i, p5.height], [margin, p5.height - margin])

      p5.textSize(p5.random(12, 48))
      p5.text(char, x, y)
    })
  }

  sketch({ draw, dimensions, padding, background, renderer: 'svg', seed })
</script>
<SketchLayout {title}>
  <Sketch />
</SketchLayout>
