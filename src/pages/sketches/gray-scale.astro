---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

export const prerender = true;

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import { createGrid, getDimensions, sketch } from "@/utils/p5";
  import type { Draw, Preload, Setup, WindowResized } from "@/utils/p5";
  import type P5 from "p5";

  const dimensions: number[] = getDimensions("A4");
  const padding: number[] = [40];
  const background = [255, 253, 252];
  const seed = 1;
  const set =
    "$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1{}[]?-_+~<>i!lI;:,\"^`'. ";
  const rows = 30;
  const cols = 40;
  let font: P5.Font;
  let grid: number[][];
  let margin: number;

  const preload: Preload = (p5) => {
    font = p5.loadFont("/fonts/DMMono-Regular.ttf");
  };

  const handleRenders = (p5: P5) => {
    margin = p5.width * 0.075;
    grid = createGrid(rows, cols)
      .filter(() => p5.random(1) > 0.95)
      .map(([u, v]) => {
        const x = p5.lerp(margin, p5.width - margin, u);
        const y = p5.lerp(margin, p5.height - margin, v);
        return [x, y];
      });

    p5.textSize(p5.width * 0.0175);
  };

  const setup: Setup = (p5) => handleRenders(p5);
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.clear(0, 0, 0, 0);
    p5.background(background);
    p5.textFont(font);

    grid.forEach(([x, y]) => {
      const char = set[Math.floor(p5.random(set.length))];
      p5.text(char, x, y);
    });
  };

  sketch({
    preload,
    setup,
    windowResized,
    draw,
    dimensions,
    padding,
    seed,
    saveAs: "svg",
    suffix: "gray-scale",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
