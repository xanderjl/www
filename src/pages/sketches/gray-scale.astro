---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

export const prerender = true;

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import { createGrid, getDimensions, sketch } from "@/utils/p5";
  import type { Draw, Preload, Setup, WindowResized } from "@/utils/p5";
  import type P5 from "p5";

  const dimensions: number[] = getDimensions("A4");
  const padding: number[] = [40];
  const background = [255, 253, 252];
  const seed = 1;
  const set =
    "$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1{}[]?-_+~<>i!lI;:,\"^`'. ";
  const filterAmt = 0.5;
  const rows = 30;
  const cols = 40;
  let font: P5.Font;
  let grid: [string, number[][]][];
  let margin: number;

  const hatchRect = (
    p5: P5,
    x: number,
    y: number,
    w: number,
    h: number = w,
    density: number = 10,
    margin: number,
  ) => {
    const x1 =
      x - w * 0.5 > p5.width - margin
        ? p5.width - margin
        : x - w * 0.5 < margin
        ? margin
        : x - w * 0.5;
    const x2 =
      x + w * 0.5 > p5.width - margin
        ? p5.width - margin
        : x + w * 0.5 < margin
        ? margin
        : x + w * 0.5;
    const y1 =
      y - h * 0.5 > p5.height - margin
        ? p5.height - margin
        : y - h * 0.5 < margin
        ? margin
        : y - h * 0.5;
    const y2 =
      y + h * 0.5 > p5.height - margin
        ? p5.height - margin
        : y + h * 0.5 < margin
        ? margin
        : y + h * 0.5;
    const mw = x2 - x1;
    const mh = y2 - y1;

    Array.from({ length: density }, (_, i) => {
      const offset = p5.map(i, 0, density, 0, mw);
      const offset2 = p5.map(i, 0, density, 0, mh);

      p5.line(x1, y2 - offset2, x1 + offset, y2);
      p5.line(x1 + offset, y1, x2, y2 - offset2);
      p5.line(x2, y2 - offset2, x2 - offset, y2);
      p5.line(x2 - offset, y1, x1, y2 - offset2);
    });
  };

  const preload: Preload = (p5) => {
    font = p5.loadFont("/fonts/DMMono-Regular.ttf");
  };

  const handleRenders = (p5: P5) => {
    margin = p5.width * 0.075;
    grid = createGrid(rows, cols)
      .filter(() => p5.random(1) > filterAmt)
      .map(([u, v]) => {
        const x = p5.lerp(margin, p5.width - margin, u);
        const y = p5.lerp(margin, p5.height - margin, v);
        const r = p5.random(1);
        const l = Math.floor(p5.random(12));
        const c = set[Math.floor(p5.random(set.length))];
        const offr = p5.random(0.004, 0.02);

        const paths = Array.from({ length: l }, (_, i) => {
          const offset = i * p5.width * offr;

          if (r > 0.25 && r < 0.5) {
            return [x + offset, y + offset];
          } else if (r > 0.5 && r < 0.75) {
            return [x - offset, y - offset];
          } else if (r > 0.75) {
            return [x - offset, y];
          } else {
            return [x, y - offset];
          }
        });

        return [c, paths];
      });

    p5.textSize(p5.width * 0.0175);
    p5.textFont(font);
    p5.redraw();
  };

  const setup: Setup = (p5) => handleRenders(p5);
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.clear(0, 0, 0, 0);
    p5.background(background);
    p5.noLoop();

    p5.push();
    p5.noFill();
    p5.stroke("red");

    Array.from({ length: 8 }, () => {
      const r = p5.random(1) > 0.5;
      const x = r
        ? p5.random(p5.width * 0.5)
        : p5.random(p5.width * 0.5, p5.width);
      const y = r
        ? p5.random(p5.height * 0.5)
        : p5.random(p5.height * 0.5, p5.height);
      const w = p5.random(p5.width * 0.5);
      const h = p5.random(p5.height * 0.5);
      const df = 0.11;
      const d = w > h ? Math.floor(w * df) : Math.floor(h * df);

      hatchRect(p5, x, y, w, h, d, margin);
    });
    p5.pop();

    p5.push();
    p5.stroke(0);
    p5.strokeWeight(p5.width * 0.00025);
    grid.forEach(([char, p]) => {
      p.forEach(([tx, ty]) => {
        if (
          tx < p5.width - margin &&
          tx > margin &&
          ty < p5.height - margin &&
          ty > margin
        ) {
          p5.text(char, tx, ty);
        }
      });
    });
    p5.pop();
  };

  sketch({
    preload,
    setup,
    windowResized,
    draw,
    dimensions,
    padding,
    seed,
    saveAs: "svg",
    suffix: "gray-scale",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
