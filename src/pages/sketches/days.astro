---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import {
    convertSeed,
    createGrid,
    createSVGOverlay,
    drawBorder,
    getDimensions,
    sketch,
  } from "@/utils/p5";
  import type { Draw, FileExtension, Setup, WindowResized } from "@/utils/p5";
  import { GUI } from "dat.gui";
  import type P5 from "p5";

  const dimensions: number[] = getDimensions("A4");
  const padding: number[] = [36];
  const background = [255, 253, 252];
  const rachelle = new Date("1995-01-16");
  const lisa = new Date("1965-02-26");
  const ross = new Date("1960-03-04");
  const xan = new Date("1993-08-30");

  type DynamicVars = {
    rows: number;
    cols: number;
    threshold: number;
    cross: number;
    crossThreshold: number;
    margin: number;
    seed: number;
    accent: string;
    stroke: string;
    accentOn: boolean;
    strokeOn: boolean;
    length: number;
    tendrils: number;
    amplitude: number;
    speed: number;
    noiseScale: number;
    circleSize: number;
    saveAs: FileExtension;
    prevSave: FileExtension;
  };

  let crosses: number[][];
  let circles: number[][];

  const defaults: DynamicVars = {
    rows: 17,
    cols: 27,
    threshold: 0.00265,
    cross: 0,
    crossThreshold: 0,
    margin: 0,
    seed: convertSeed(
      rachelle.toISOString() +
        lisa.toISOString() +
        ross.toISOString() +
        xan.toISOString(),
    ),
    accent: "#FF0000",
    stroke: "#000000",
    accentOn: true,
    strokeOn: true,
    length: 100,
    tendrils: 6,
    amplitude: 0,
    speed: 0,
    noiseScale: 1000,
    circleSize: 0,
    saveAs: "png",
    prevSave: "png",
  };

  let dat: DynamicVars = { ...defaults };

  const walker = (
    p5: P5,
    cx: number,
    cy: number,
    size: number,
    length: number,
    amplitude: number,
    speed: number,
  ) => {
    p5.push();
    p5.fill(background);
    p5.stroke(dat.accent);

    Array.from({ length: Math.floor(p5.random(1, dat.tendrils)) }, (_, i) => {
      let x = cx;
      let y = cy;

      Array.from({ length }, () => {
        const a = p5.noise(x / dat.noiseScale, y / dat.noiseScale) * amplitude;
        x += Math.cos(a + i * speed) * speed;
        y += Math.sin(a + i * speed) * speed;

        p5.circle(x, y, size);
      });
    });
    p5.pop();
  };

  const createGUI = (p5: P5) => {
    const gui = new GUI();
    const grf = gui.addFolder("grid");
    const glf = gui.addFolder("globals");
    const clf = gui.addFolder("colors");
    const wlf = gui.addFolder("walkers");
    grf.open();
    glf.open();
    clf.open();
    wlf.open();
    glf
      .add(dat, "seed", 1, 10000, 1)
      .name("seed")
      .onChange(() => handleRenders(p5));
    grf
      .add(dat, "rows", 1, 80, 1)
      .name("rows")
      .onChange(() => handleRenders(p5));
    grf
      .add(dat, "cols", 1, 80, 1)
      .name("cols")
      .onChange(() => handleRenders(p5));
    glf
      .add(dat, "threshold", 0.000000001, 0.01)
      .name("threshold")
      .onChange(() => handleRenders(p5));
    glf
      .add(dat, "margin", p5.width * 0.01, p5.width * 0.25)
      .name("margin")
      .onChange(() => handleRenders(p5));
    glf
      .add(dat, "cross", p5.width * 0.001, p5.width * 0.022, 0.00001)
      .name("cross size")
      .onChange(() => p5.redraw());
    glf
      .add(dat, "crossThreshold", 0, 1, 0.00001)
      .name("cross threshold")
      .onChange(() => handleRenders(p5));
    glf
      .add(dat, "saveAs", ["png", "svg", "jpg"])
      .name("save as")
      .onChange(() => {
        gui.destroy();

        p5.remove();
        const container = document.getElementById("container");
        if (container) container.innerHTML = "";

        sketch({
          setup,
          windowResized,
          draw,
          dimensions,
          padding,
          seed: dat.seed,
          saveAs: dat.saveAs,
          suffix: "days",
        });
      });
    clf
      .addColor(dat, "stroke")
      .name("stroke")
      .onFinishChange(() => handleRenders(p5));
    clf
      .addColor(dat, "accent")
      .name("accent")
      .onFinishChange(() => p5.redraw());
    clf
      .add(dat, "strokeOn")
      .name("toggle stroke")
      .onChange(() => p5.redraw());
    clf
      .add(dat, "accentOn")
      .name("toggle accent")
      .onChange(() => p5.redraw());
    wlf
      .add(dat, "length", 1, 1000, 1)
      .name("length")
      .onChange(() => p5.redraw());
    wlf
      .add(dat, "tendrils", 1, 20, 1)
      .name("tendrils")
      .onChange(() => p5.redraw());
    wlf
      .add(dat, "amplitude", p5.width * 0.0001, p5.width * 0.2, 0.0001)
      .name("amplitude")
      .onChange(() => p5.redraw());
    wlf
      .add(dat, "speed", p5.width * 0.0000001, p5.width * 0.01)
      .name("speed")
      .onChange(() => p5.redraw());
    wlf
      .add(dat, "noiseScale", 1, 1000, 1)
      .name("noise scale")
      .onChange(() => p5.redraw());
    wlf
      .add(dat, "circleSize", p5.width * 0.01, p5.width * 0.5)
      .name("circle size")
      .onChange(() => p5.redraw());
  };

  const handleRenders = (p5: P5) => {
    p5.noiseSeed(dat.seed);
    p5.randomSeed(dat.seed);

    crosses = [];
    circles = [];

    let fam = [
      p5.noise(parseInt(rachelle.toTimeString())),
      p5.noise(parseInt(lisa.toTimeString())),
      p5.noise(parseInt(ross.toTimeString())),
      p5.noise(parseInt(xan.toTimeString())),
    ];

    createGrid(dat.rows, dat.cols).map(([u, v], i) => {
      const x = p5.lerp(dat.margin * 2, p5.width - dat.margin * 2, u);
      const y = p5.lerp(dat.margin * 2, p5.height - dat.margin * 2, v);

      const control = p5.noise(i);
      const s =
        fam.length === 0
          ? false
          : control <= fam[0] && control >= fam[0] - dat.threshold;

      if (s === true) {
        fam.shift();
        circles.push([x, y]);
      } else {
        if (p5.noise(x, y, i) > dat.crossThreshold) crosses.push([x, y]);
      }
    });

    p5.redraw();
  };

  const setup: Setup = (p5) => {
    if (dat.margin == defaults.margin) dat.margin = p5.width * 0.075;
    if (dat.cross == defaults.cross) dat.cross = p5.width * 0.005;
    if (dat.speed == defaults.speed) dat.speed = p5.width * 0.001;
    if (dat.amplitude == defaults.amplitude) dat.amplitude = p5.width * 0.01;
    if (dat.circleSize == defaults.circleSize)
      dat.circleSize = p5.width * 0.0175;
    dat.prevSave = dat.saveAs;

    handleRenders(p5);
    createGUI(p5);
  };
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.noLoop();
    p5.clear(0, 0, 0, 0);
    p5.background(background);
    p5.stroke(dat.stroke);

    crosses.forEach(([x, y]) => {
      if (dat.strokeOn) {
        p5.line(x, y - dat.cross, x, y + dat.cross);
        p5.line(x - dat.cross, y, x + dat.cross, y);
      }
    });

    circles.forEach(([x, y]) => {
      if (dat.accentOn) {
        const tendrils = Math.floor(p5.random(1, 10));
        walker(p5, x, y, dat.circleSize, dat.length, dat.amplitude, dat.speed);
      }
    });

    createSVGOverlay(p5, dat.margin, background);
    if (dat.strokeOn) {
      drawBorder(p5, dat.margin);
    }
  };

  sketch({
    setup,
    windowResized,
    draw,
    dimensions,
    padding,
    seed: dat.seed,
    saveAs: dat.saveAs,
    suffix: "days",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
