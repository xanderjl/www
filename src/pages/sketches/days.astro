---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

export const prerender = true;

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import {
    convertSeed,
    createGrid,
    createSVGOverlay,
    drawBorder,
    getDimensions,
    sketch,
  } from "@/utils/p5";
  import type {
    Draw,
    KeyPressed,
    MousePressed,
    Setup,
    WindowResized,
  } from "@/utils/p5";
  import { GUI } from "dat.gui";
  import type P5 from "p5";

  const dimensions: number[] = getDimensions("A4");
  const padding: number[] = [16];
  const background = [255, 253, 252];
  const rachelle = new Date("1995-01-16");
  const lisa = new Date("1965-02-26");
  const ross = new Date("1960-03-04");
  const xan = new Date("1993-08-30");
  const seed = convertSeed(
    rachelle.toISOString() +
      lisa.toISOString() +
      ross.toISOString() +
      xan.toISOString(),
  );

  const gridVals = {
    rows: 16,
    cols: 24,
  };

  let margin: number;
  let grid: [number, number, boolean][];
  let crossSize: number;

  const walker = (
    p5: P5,
    cx: number,
    cy: number,
    length: number,
    freq: number,
    speed: number,
  ) => {
    Array.from({ length }, (_, i) => {
      const a = p5.noise(p5.TWO_PI * i);
      const x = cx + Math.cos(a * freq) * speed;
      const y = cy + Math.sin(a * freq) * speed;

      p5.circle(x, y, 10);
    });
  };

  const handleRenders = (p5: P5) => {
    margin = p5.width * 0.075;

    let fam = [
      p5.noise(parseInt(rachelle.toTimeString())),
      p5.noise(parseInt(lisa.toTimeString())),
      p5.noise(parseInt(ross.toTimeString())),
      p5.noise(parseInt(xan.toTimeString())),
    ];

    grid = createGrid(gridVals.rows, gridVals.cols).map(([u, v], i) => {
      const x = p5.lerp(margin * 2, p5.width - margin * 2, u);
      const y = p5.lerp(margin * 2, p5.height - margin * 2, v);

      const control = p5.noise(i);
      const s =
        fam.length === 0
          ? false
          : control <= fam[0] && control >= fam[0] - 0.00265;

      if (s === true) {
        fam.shift();
      }

      return [x, y, s];
    });
    crossSize = p5.width * 0.005;

    p5.redraw();
  };

  const setup: Setup = (p5) => {
    const gui = new GUI();
    const gridFolder = gui.addFolder("grid");
    gridFolder
      .add(gridVals, "rows", 1, 80, 1)
      .name("rows")
      .onChange(() => handleRenders(p5));
    gridFolder
      .add(gridVals, "cols", 1, 80, 1)
      .name("cols")
      .onChange(() => handleRenders(p5));

    handleRenders(p5);
  };
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.noLoop();
    p5.clear(0, 0, 0, 0);
    p5.background(background);

    grid.forEach(([x, y, s]) => {
      if (s) {
        walker(p5, x, y, 100, 1000, 100);
      } else {
        p5.line(x, y - crossSize, x, y + crossSize);
        p5.line(x - crossSize, y, x + crossSize, y);
      }
    });

    createSVGOverlay(p5, margin, background);
    drawBorder(p5, margin);
  };

  sketch({
    setup,
    windowResized,
    draw,
    dimensions,
    padding,
    seed,
    saveAs: "svg",
    suffix: "days",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
