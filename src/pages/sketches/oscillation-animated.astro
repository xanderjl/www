---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import { getDimensions, sketch } from "@/utils/p5";
  import type { Draw, Setup, WindowResized } from "@/utils/p5";
  import type P5 from "p5";

  const dimensions: number[] = getDimensions("square");
  const padding: number[] = [16];
  const background = [35, 30, 30];
  const stroke = [255, 253, 252];
  const length = 40;
  const radLength = 82;
  let margin: number;

  const handleRenders = (p5: P5) => {
    margin = p5.width * 0.075;
  };

  const setup: Setup = (p5) => handleRenders(p5);
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.clear(0, 0, 0, 0);
    p5.background(background);
    p5.fill(background);
    p5.stroke(stroke);

    Array.from({ length: radLength }, (_, i) => {
      p5.push();
      p5.translate(p5.width * 0.5, p5.height * 0.5);
      p5.rotate(i / p5.TWO_PI + p5.frameCount * 0.03927 * 0.0625);
      Array.from({ length }, (_, j) => {
        const y = p5.lerp(
          margin * 2,
          p5.height - margin * 4,
          (j / (length - 1)) * 0.4,
        );
        const x = 0;
        const w =
          Math.sin((j / (length - 1)) * 4 + 15.708 * p5.frameCount * 0.005) *
          p5.width *
          0.075;

        p5.circle(x, y, w);
      });
      p5.pop();
    });
  };

  sketch({
    setup,
    windowResized,
    draw,
    dimensions,
    padding,
    saveAs: "gif",
    gifOptions: [
      640,
      {
        delay: 0,
        units: "frames",
      },
    ],
    suffix: "oscillation-animated",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
