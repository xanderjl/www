---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

export const prerender = true;

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import type { Draw, Setup, WindowResized } from "@/utils/p5";
  import {
    createGrain,
    createOverlay,
    getDimensions,
    sketch,
  } from "@/utils/p5";
  import type P5 from "p5";

  const dimensions: number[] = getDimensions("square");
  const padding: number[] = [40];
  const background = [255, 253, 252];
  const seed = 1;
  let margin: number;
  let borders: P5.Vector[];
  let divisions: P5.Vector[];
  let grain: P5.Graphics;
  let overlay: P5.Graphics;

  const handleRenders = (p5: P5) => {
    margin = p5.width * 0.075;
    borders = [
      p5.createVector(margin, margin),
      p5.createVector(p5.width - margin, margin),
      p5.createVector(p5.width - margin, p5.height - margin),
      p5.createVector(margin, p5.height - margin),
    ];

    const length = 80;
    let prevX: number = borders[0].x;

    divisions = Array.from({ length }, (_, i) => {
      let x: number;

      if (i === 0) {
        x = borders[0].x;
      } else if (i === length - 1) {
        x = borders[1].x;
      } else {
        const range = p5.random() > 0.5 ? p5.width * 0.01 : p5.width * 0.045;
        x = p5.constrain(
          p5.random(prevX, prevX + range),
          borders[0].x,
          borders[1].x,
        );
      }
      prevX = x;

      const y = borders[0].y;

      return p5.createVector(x, y);
    });

    grain = createGrain(p5, 40);
    overlay = createOverlay(p5, background, margin);

    p5.redraw();
  };

  const setup: Setup = (p5) => handleRenders(p5);
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.noLoop();
    p5.background(background);

    divisions.forEach(({ x, y }, i) => {
      let x2;

      if (i === divisions.length - 1) {
        x2 = borders[1].x;
      } else {
        x2 = divisions[i + 1].x;
      }
      const y2 = borders[2].y;
      const w = x2 - x;
      const h = y2 - y;

      const r = p5.random() > 0.5;

      if (r) {
        p5.fill(p5.random(100, 255), 0, 0);
      } else {
        const rc = p5.random() > 0.25 ? p5.random(150, 255) : 0;

        p5.fill(rc + 40, rc, rc);
      }

      p5.rect(x, y, w, h);
    });

    p5.image(grain, 0, 0);
    p5.image(overlay, 0, 0);
  };

  sketch({
    dimensions,
    setup,
    windowResized,
    draw,
    padding,
    seed,
    saveAs: "png",
    suffix: "day-02",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
