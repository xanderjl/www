---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import type { Draw, Setup, WindowResized } from "@/utils/p5";
  import { getDimensions, sketch } from "@/utils/p5";
  import type P5 from "p5";

  const dimensions: number[] = getDimensions("square");
  const padding: number[] = [40];
  const background = [255, 253, 252];
  const seed = 1;
  const rows = 12;
  const cols = 12;
  let margin: number;
  let width: number;
  let height: number;
  let size: number;
  let grid: number[][];
  let h: number;
  let v: number;
  let x: number;
  let y: number;

  const hexagon = (p5: P5, x: number, y: number, size: number) => {
    p5.beginShape();
    Array.from({ length: 6 }).forEach((_, i) => {
      const angle = p5.radians(60) * i - p5.radians(30);
      const sx = x + p5.cos(angle) * size;
      const sy = y + p5.sin(angle) * size;
      p5.vertex(sx, sy);
    });
    p5.endShape(p5.CLOSE);
  };

  const handleRenders = (p5: P5) => {
    margin = p5.width * 0.125;
    size = (p5.width / rows) * 0.75;
    width = Math.sqrt(3) * size;
    height = size * 2;
    h = width;
    v = height * 0.75;
    x = p5.width * 0.5;
    y = p5.height * 0.5;
    const offsetGrid = () => {
      const points: number[][] = [];

      Array.from({ length: cols }, (_, i) =>
        Array.from({ length: rows }, (_, j) => {
          const u = i / (cols - 1);
          const v = j / (rows - 1);
          const x =
            j % 2 === 0
              ? p5.lerp(0, p5.width, u) + size * 0.75
              : p5.lerp(0, p5.width, u);
          const y = p5.lerp(0, p5.height, v);

          points.push([x, y]);
        }),
      );

      return points;
    };

    grid = offsetGrid();

    p5.redraw();
  };

  const setup: Setup = (p5) => handleRenders(p5);
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.noLoop();
    p5.background(background);

    grid.forEach(([x, y], i) => {
      if (i % 2 === 0) {
        // p5.fill(0);
      } else {
        p5.fill(255);
      }

      hexagon(p5, x, y, size);
      p5.circle(x, y, 5);
    });
  };

  sketch({
    dimensions,
    setup,
    windowResized,
    draw,
    padding,
    seed,
    saveAs: "png",
    suffix: "day-09",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
