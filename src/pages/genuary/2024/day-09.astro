---
import { capitalCase } from "change-case";

import Sketch from "@/components/Sketch.astro";
import SketchLayout from "@/layouts/SketchLayout.astro";

export const prerender = true;

const { pathname } = Astro.url;
const title = capitalCase(pathname.split("/").pop() ?? "");
---

<script>
  import type { Draw, Setup, WindowResized } from "@/utils/p5";
  import { createGrid, getDimensions, sketch } from "@/utils/p5";
  import type P5 from "p5";

  const dimensions: number[] = getDimensions("square");
  const padding: number[] = [40];
  const background = [255, 253, 252];
  const seed = 1;
  const rows = 60;
  const ASCII =
    "$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/|()1{}[]?-_+~<>i!lI;:,\"^`'.";
  let margin: number;
  let grid: number[][];
  let size: number;

  const handleRenders = (p5: P5) => {
    margin = p5.width * 0.125;
    grid = createGrid(rows).map(([u, v]) => {
      const x = p5.lerp(margin, p5.width - margin, u);
      const y = p5.lerp(margin, p5.height - margin, v);

      return [x, y];
    });

    size = (p5.width - margin * 2) / rows;

    p5.redraw();
  };

  const setup: Setup = (p5) => handleRenders(p5);
  const windowResized: WindowResized = (p5) => handleRenders(p5);

  const draw: Draw = (p5) => {
    p5.noLoop();
    p5.background(background);

    grid.forEach(([x, y], i) => {
      const r = p5.noise(x, y) * 2;
      const char = ASCII[Math.floor(p5.map(r, 0, 1, 0, ASCII.length))];

      p5.textSize(size);
      p5.text(char, x, y);
    });
  };

  sketch({
    dimensions,
    setup,
    windowResized,
    draw,
    padding,
    seed,
    saveAs: "png",
    suffix: "day-09",
  });
</script>

<SketchLayout {title}>
  <Sketch />
</SketchLayout>
