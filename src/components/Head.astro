---
// @ts-ignore
import getShareImage from "@jlengstorf/get-share-image";
import { ViewTransitions } from "astro:transitions";

import baseUrl from "@/utils/baseUrl";

interface Props {
  description?: string;
  title?: string;
}

const { title, description } = Astro.props;
const { href } = Astro.url;

const padding = 60;

const formattedTitle = title ? `Xander Low | ${title}` : "Xander Low";
const formattedDescription = description ?? "Developing for the web";

const ogImage = getShareImage({
  cloudName: "dbgrselct",
  imageHeight: 630,
  imagePublicID: "og-image",
  imageWidth: 1200,
  tagline: formattedDescription,
  taglineColor: "000000",
  taglineFont: "dm-mono.ttf",
  taglineFontSize: 36,
  taglineTopOffset: 300,
  textLeftOffset: padding,
  title: formattedTitle,
  titleBottomOffset: 400,
  titleColor: "000000",
  titleFont: "inter-bold.ttf",
  titleFontSize: 72,
});
---
<head>
  <meta charset="utf-8" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <link rel="sitemap" href="/sitemap-index.xml" />
  <meta name="viewport" content="width=device-width" />
  <meta name="generator" content={Astro.generator} />
  {ogImage && (
    <meta property="og:url" content={href} />
    <meta property="og:image" content={new URL(ogImage)} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:title" content={formattedTitle} />
    <meta property="og:description" content={formattedDescription} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content={baseUrl} />
    <meta name="twitter:title" content={formattedTitle} />
    <meta name="twitter:description" content={formattedDescription} />
  )}
  <meta name="description" content={formattedDescription} />
  <slot />
  <title>{formattedTitle}</title>
  <ViewTransitions />
</head>
